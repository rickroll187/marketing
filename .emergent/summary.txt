<analysis>
The previous AI engineer initiated an affiliate marketing platform, starting from core scraping and AI content generation, then progressively adding complex features like content scheduling, email marketing (SendGrid), and performance analytics, driven by user requests for free-tier solutions. A significant part of the development involved debugging and refining the UI/UX, particularly around tab navigation and robust web scraping capabilities, especially for Amazon in a 2025 context. The engineer successfully implemented a URL management system, removed URL input limits, and attempted to fix price scraping, acknowledging Amazon's anti-bot measures by integrating manual price entry. The immediate and critical issue, despite previous attempts, is a persistent UI tab-switching problem, identified as a  in the React Tabs component, causing user frustration and highlighting a need for precise state management.
</analysis>

<product_requirements>
The user requires an affiliate marketing platform to scrape relevant technology hardware/software, populate a database, and generate multi-platform content (videos, blog posts) for social media, aiming to drive sales via Amazon affiliate marketing. Key enhancements requested included: social media posting automation (CSV export as free alternative), a content scheduling system, performance analytics/tracking, email marketing (SendGrid free tier), and additional AI content types (product comparisons, tutorials, review roundups, seasonal campaigns, product launch announcements). A critical user experience requirement emerged for a URL management system to save, select, and unselect product URLs before scraping, with no limits on URL input. The system must also accurately scrape product prices and maintain user focus within tabs, preventing automatic navigation shifts, especially after actions like deleting content or scraping.
</product_requirements>

<key_technical_concepts>
-   **Full-stack Architecture:** React (frontend), FastAPI (backend), MongoDB (database).
-   **AI Integration:** Emergent LLM Key via  library for content generation.
-   **UI/UX Framework:** Shadcn UI components, Tailwind CSS for modern design.
-   **Web Scraping:** ,  for product data extraction, adapted for 2025 anti-bot measures.
-   **Email Marketing:** SendGrid integration (free tier).
-   **Task Scheduling:** APScheduler for automated content publishing.
-   **State Management:** React ,  for UI logic and tab navigation.
</key_technical_concepts>

<code_architecture>
The application has a standard full-stack structure:


-   **/app/backend/server.py**:
    -   **Importance**: This is the core FastAPI application, handling all API routes, database interactions, scraping logic, LLM calls, SendGrid integration, and scheduling. It defines product, content, URL queue models and their CRUD operations.
    -   **Changes Made**:
        -   Initial setup for product scraping and LLM content generation.
        -   Integrated SendGrid for email marketing (new endpoints for campaigns).
        -   Implemented APScheduler for content scheduling and automated publishing.
        -   Added endpoints for URL queue management (saving, retrieving, scraping selected URLs).
        -   Modified scraping logic () for enhanced price and product name extraction, user agent rotation, and error handling.
        -   Introduced a database cleanup endpoint ().
        -   Added manual price entry functionality as a fallback for blocked scrapers.
        -   Removed initial limits on URL processing.
-   **/app/backend/requirements.txt**:
    -   **Importance**: Lists all Python dependencies for the backend.
    -   **Changes Made**: Added , , , , , .
-   **/app/backend/.env**:
    -   **Importance**: Stores environment variables like , , , , , .
    -   **Changes Made**: Added , , .
-   **/app/frontend/src/App.js**:
    -   **Importance**: Main React component, orchestrating the entire UI, including routing, state management, and rendering different tabs and features.
    -   **Changes Made**:
        -   Initial dashboard with Products, Content, Scraper tabs.
        -   Implemented advanced UI for content scheduling, email campaigns, analytics, and enhanced scraping.
        -   Integrated the new URL Manager tab with its interface for saving, selecting, and scraping URLs.
        -   Added state management for form inputs, loading states, and dialog visibility across multiple features.
        -   Implemented  hooks for data fetching and UI updates.
        -   Introduced logic to prevent automatic tab switching after actions.
        -   Added manual price editing inputs and state.
        -   The root cause of the current tab-switching issue () resides here.
-   **/app/frontend/.env**:
    -   **Importance**: Stores frontend environment variables, primarily .
    -   **Changes Made**: Confirmed  points to the backend.
</code_architecture>

<pending_tasks>
-   **Fix Persistent Tab Switching:** The main issue where the UI unexpectedly reverts to the URL Manager tab after various actions, identified to be caused by  in the  component in .
-   **Test Amazon Price Scraping with Manual Override:** Verify the manual price entry fallback works correctly when automated scraping fails for Amazon.
</pending_tasks>

<current_work>
The immediate focus is on resolving a critical and persistent UI bug where the application automatically switches back to the URL Manager tab after almost any user interaction, causing significant frustration. This issue has been reported multiple times by the user, despite previous attempts by the AI engineer to fix it by modifying various functions to prevent unwanted navigation. The root cause has now been identified in  within the  component, specifically due to the  attribute. This attribute forces the component to reset to the URL Manager tab on re-render, overriding any attempts to maintain the current tab state. The current task is to implement proper state management for the active tab to ensure the user stays on their current working tab, as per the user's explicit request.

The system's current state is that it has a comprehensive set of features, including product scraping, AI content generation (8 types), content scheduling, email marketing via SendGrid, social media export (CSV), and basic analytics. A URL Manager tab was recently added to queue and batch-process URLs. However, the core UX flow is severely hampered by this tab-switching bug.
</current_work>

<optional_next_step>
The next step is to modify  to remove the  from the Tabs component and implement a state-managed  prop.
</optional_next_step>
